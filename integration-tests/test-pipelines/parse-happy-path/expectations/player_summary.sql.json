{
  "asset": {
    "id": "8361c0131fda306b28fd4f3c8f2af121cca5e57baf77a771b4cb218abda4ca5b",
    "uri": "",
    "name": "chess_playground.player_summary",
    "type": "duckdb.sql",
    "description": "",
    "connection": "",
    "tags": [],
    "materialization": {
      "type": "table",
      "strategy": "",
      "partition_by": "",
      "cluster_by": null,
      "incremental_key": ""
    },
    "upstreams": [
      {
        "type": "asset",
        "value": "chess_playground.games",
        "columns": []
      },
      {
        "type": "asset",
        "value": "chess_playground.profiles",
        "columns": []
      }
    ],
    "image": "",
    "instance": "",
    "owner": "",
    "executable_file": {
      "name": "player_summary.sql",
      "path": "/integration-tests/happy-path/assets/player_summary.sql",
      "content": "WITH game_results AS (\n    SELECT\n        CASE\n            WHEN g.white-\u003e\u003e'result' = 'win' THEN g.white-\u003e\u003e'@id'\n            WHEN g.black-\u003e\u003e'result' = 'win' THEN g.black-\u003e\u003e'@id'\n            ELSE NULL\n            END AS winner_aid,\n        g.white-\u003e\u003e'@id' AS white_aid,\n    g.black-\u003e\u003e'@id' AS black_aid\nFROM chess_playground.games g\n)\n\nSELECT\n    p.username,\n    p.aid,\n    COUNT(*) AS total_games,\n    COUNT(CASE WHEN g.white_aid = p.aid AND g.winner_aid = p.aid THEN 1 END) AS white_wins,\n    COUNT(CASE WHEN g.black_aid = p.aid AND g.winner_aid = p.aid THEN 1 END) AS black_wins,\n    COUNT(CASE WHEN g.white_aid = p.aid THEN 1 END) AS white_games,\n    COUNT(CASE WHEN g.black_aid = p.aid THEN 1 END) AS black_games,\n    ROUND(COUNT(CASE WHEN g.white_aid = p.aid AND g.winner_aid = p.aid THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN g.white_aid = p.aid THEN 1 END), 0), 2) AS white_win_rate,\n    ROUND(COUNT(CASE WHEN g.black_aid = p.aid AND g.winner_aid = p.aid THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN g.black_aid = p.aid THEN 1 END), 0), 2) AS black_win_rate\nFROM chess_playground.profiles p\nLEFT JOIN game_results g\n       ON p.aid IN (g.white_aid, g.black_aid)\nGROUP BY p.username, p.aid\nORDER BY total_games DESC"
    },
    "definition_file": {
      "name": "player_summary.sql",
      "path": "/integration-tests/happy-path/assets/player_summary.sql",
      "type": "comment"
    },
    "parameters": {},
    "secrets": [],
    "columns": [
      {
        "entity_attribute": null,
        "name": "total_games",
        "type": "integer",
        "description": "the games",
        "primary_key": false,
        "update_on_merge": false,
        "checks": [
          {
            "id": "df9255080865c27b164a7de36a0a26bcc00345dddd66849d96aa96a2c68266ea",
            "name": "positive",
            "value": null,
            "blocking": true
          }
        ],
        "upstreams": []
      }
    ],
    "custom_checks": [],
    "metadata": {},
    "snowflake": null,
    "athena": null
  },
  "pipeline": {
    "legacy_id": "",
    "name": "integration_test",
    "schedule": "",
    "start_date": "",
    "definition_file": {
      "name": "pipeline.yml",
      "path": "/integration-tests/happy-path/pipeline.yml"
    },
    "default_parameters": {},
    "default_connections": {},
    "assets": [
      {
        "id": "17c2f1111545c0e72ea13a3a07fb3d5a4d96074d128ed10c1c03cc477401d61a",
        "uri": "",
        "name": "python_asset",
        "type": "python",
        "description": "",
        "connection": "",
        "tags": [],
        "materialization": null,
        "upstreams": [
          {
            "type": "asset",
            "value": "chess_playground.player_summary",
            "columns": []
          }
        ],
        "image": "python:3.11",
        "instance": "",
        "owner": "",
        "executable_file": {
          "name": "asset.py",
          "path": "/integration-tests/happy-path/assets/asset.py",
          "content": "import os\nimport duckdb\n\nif os.getenv('INJECTED1') != \"value1\":\n    raise Exception(\"KEY1 is not injected correctly\")\n\ncon = duckdb.connect(database = \"duckdb.db\", read_only = False)\n\ncon.execute(\"SELECT * FROM chess_playground.player_summary\")\nresult = con.fetchall()\nif len(result) != 2:\n    raise Exception(\"Incorrect number of rows in player_summary\")"
        },
        "definition_file": {
          "name": "asset.py",
          "path": "/integration-tests/happy-path/assets/asset.py",
          "type": "comment"
        },
        "parameters": {},
        "secrets": [
          {
            "secret_key": "KEY1",
            "injected_key": "INJECTED1"
          }
        ],
        "columns": [],
        "custom_checks": [],
        "metadata": {},
        "snowflake": null,
        "athena": null
      },
      {
        "id": "209c299a591add072bfa259ad5f311ab7c5aa154960a55b20f3d6de33bb8f21b",
        "uri": "",
        "name": "chess_playground.games",
        "type": "ingestr",
        "description": "",
        "connection": "",
        "tags": [],
        "materialization": null,
        "upstreams": [],
        "image": "",
        "instance": "",
        "owner": "",
        "executable_file": {
          "name": "chess_games.asset.yml",
          "path": "/integration-tests/happy-path/assets/chess_games.asset.yml",
          "content": "name: chess_playground.games\ntype: ingestr\nparameters:\n  source_connection: chess-default\n  source_table: games\n  destination: duckdb"
        },
        "definition_file": {
          "name": "chess_games.asset.yml",
          "path": "/integration-tests/happy-path/assets/chess_games.asset.yml",
          "type": "yaml"
        },
        "parameters": {
          "destination": "duckdb",
          "source_connection": "chess-default",
          "source_table": "games"
        },
        "secrets": [],
        "columns": [],
        "custom_checks": [],
        "metadata": {},
        "snowflake": null,
        "athena": null
      },
      {
        "id": "c53385eb13eb4d3d102be02b0d3fe4a10661339b3c098de8b226f7317fc47d21",
        "uri": "",
        "name": "chess_playground.profiles",
        "type": "ingestr",
        "description": "",
        "connection": "",
        "tags": [],
        "materialization": null,
        "upstreams": [],
        "image": "",
        "instance": "",
        "owner": "",
        "executable_file": {
          "name": "chess_profiles.asset.yml",
          "path": "/integration-tests/happy-path/assets/chess_profiles.asset.yml",
          "content": "name: chess_playground.profiles\ntype: ingestr\nparameters:\n  source_connection: chess-default\n  source_table: profiles\n  destination: duckdb"
        },
        "definition_file": {
          "name": "chess_profiles.asset.yml",
          "path": "/integration-tests/happy-path/assets/chess_profiles.asset.yml",
          "type": "yaml"
        },
        "parameters": {
          "destination": "duckdb",
          "source_connection": "chess-default",
          "source_table": "profiles"
        },
        "secrets": [],
        "columns": [],
        "custom_checks": [],
        "metadata": {},
        "snowflake": null,
        "athena": null
      },
      {
        "id": "8361c0131fda306b28fd4f3c8f2af121cca5e57baf77a771b4cb218abda4ca5b",
        "uri": "",
        "name": "chess_playground.player_summary",
        "type": "duckdb.sql",
        "description": "",
        "connection": "",
        "tags": [],
        "materialization": {
          "type": "table",
          "strategy": "",
          "partition_by": "",
          "cluster_by": null,
          "incremental_key": ""
        },
        "upstreams": [
          {
            "type": "asset",
            "value": "chess_playground.games",
            "columns": []
          },
          {
            "type": "asset",
            "value": "chess_playground.profiles",
            "columns": []
          }
        ],
        "image": "",
        "instance": "",
        "owner": "",
        "executable_file": {
          "name": "player_summary.sql",
          "path": "/integration-tests/happy-path/assets/player_summary.sql",
          "content": "WITH game_results AS (\n    SELECT\n        CASE\n            WHEN g.white-\u003e\u003e'result' = 'win' THEN g.white-\u003e\u003e'@id'\n            WHEN g.black-\u003e\u003e'result' = 'win' THEN g.black-\u003e\u003e'@id'\n            ELSE NULL\n            END AS winner_aid,\n        g.white-\u003e\u003e'@id' AS white_aid,\n    g.black-\u003e\u003e'@id' AS black_aid\nFROM chess_playground.games g\n)\n\nSELECT\n    p.username,\n    p.aid,\n    COUNT(*) AS total_games,\n    COUNT(CASE WHEN g.white_aid = p.aid AND g.winner_aid = p.aid THEN 1 END) AS white_wins,\n    COUNT(CASE WHEN g.black_aid = p.aid AND g.winner_aid = p.aid THEN 1 END) AS black_wins,\n    COUNT(CASE WHEN g.white_aid = p.aid THEN 1 END) AS white_games,\n    COUNT(CASE WHEN g.black_aid = p.aid THEN 1 END) AS black_games,\n    ROUND(COUNT(CASE WHEN g.white_aid = p.aid AND g.winner_aid = p.aid THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN g.white_aid = p.aid THEN 1 END), 0), 2) AS white_win_rate,\n    ROUND(COUNT(CASE WHEN g.black_aid = p.aid AND g.winner_aid = p.aid THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN g.black_aid = p.aid THEN 1 END), 0), 2) AS black_win_rate\nFROM chess_playground.profiles p\nLEFT JOIN game_results g\n       ON p.aid IN (g.white_aid, g.black_aid)\nGROUP BY p.username, p.aid\nORDER BY total_games DESC"
        },
        "definition_file": {
          "name": "player_summary.sql",
          "path": "/integration-tests/happy-path/assets/player_summary.sql",
          "type": "comment"
        },
        "parameters": {},
        "secrets": [],
        "columns": [
          {
            "entity_attribute": null,
            "name": "total_games",
            "type": "integer",
            "description": "the games",
            "primary_key": false,
            "update_on_merge": false,
            "checks": [
              {
                "id": "df9255080865c27b164a7de36a0a26bcc00345dddd66849d96aa96a2c68266ea",
                "name": "positive",
                "value": null,
                "blocking": true
              }
            ],
            "upstreams": []
          }
        ],
        "custom_checks": [],
        "metadata": {},
        "snowflake": null,
        "athena": null
      }
    ],
    "notifications": {
      "slack": [],
      "ms_teams": [],
      "discord": []
    },
    "catchup": false,
    "metadata_push": {
      "bigquery": false
    },
    "retries": 0
  },
  "repo": {
    "path": "/integration-tests"
  }
}
