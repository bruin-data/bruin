name: CI Checks

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'resources/**'
      - 'templates/**'
      - 'install.sh'
      - 'README.md'
      - 'Makefile'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'resources/**'
      - 'templates/**'
      - 'install.sh'
      - 'README.md'
      - 'Makefile'
      - 'package.json'
      - 'package-lock.json'


concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || (github.ref == 'refs/heads/main' && github.sha || github.ref) }}
  cancel-in-progress: true


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bruin-data/bruin

jobs:
  test:
    strategy:
      matrix:
        platform: [ ubuntu-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
# TODO: Replace with actions/setup-go once issue is resolved https://github.com/actions/setup-go/pull/515
      - name: Setup Go 
        uses: antontroshin/setup-go@windows-go-mod-cache
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: "go.sum"
      - run: make test


  end2end:
    strategy:
      matrix:
        platform: [ ubuntu-latest, windows-2022 ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
# TODO: Replace with actions/setup-go once issue is resolved https://github.com/actions/setup-go/pull/515
      - name: Setup Go 
        uses: antontroshin/setup-go@windows-go-mod-cache
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: "go.sum"
      - name: Install winget
        if: matrix.platform == 'windows-2022'
        uses: Cyberboss/install-winget@v1
      
      - name: Debug - Pre-build environment
        run: |
          echo "=== PRE-BUILD DEBUGGING ==="
          echo "Working directory: $(pwd)"
          echo "Platform: ${{ matrix.platform }}"
          echo "Files in current directory:"
          ls -la
          echo ""
          echo "Go version:"
          go version
          echo ""
          echo "Go environment:"
          go env GOROOT GOPATH GOCACHE
          echo ""
          echo "Checking for existing bin directory:"
          if [ -d "bin" ]; then
            echo "bin directory exists"
            ls -la bin/
          else
            echo "bin directory does not exist"
          fi

      - name: Build Bruin executable
        run: |
          echo "=== BUILDING BRUIN ==="
          mkdir -p bin
          if [[ "${{ matrix.platform }}" == "windows-2022" ]]; then
            echo "Building for Windows..."
            go build -o bin/bruin.exe .
          else
            echo "Building for Unix..."
            go build -o bin/bruin .
          fi
          echo "Build completed"
        shell: bash

      - name: Debug - Post-build verification
        run: |
          echo "=== POST-BUILD DEBUGGING ==="
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo ""
          echo "Bin directory contents:"
          if [ -d "bin" ]; then
            ls -la bin/
            echo ""
            echo "Binary file details:"
            if [[ "${{ matrix.platform }}" == "windows-2022" ]]; then
              if [ -f "bin/bruin.exe" ]; then
                echo "✅ bruin.exe exists"
                file bin/bruin.exe
                ls -la bin/bruin.exe
              else
                echo "❌ bruin.exe does not exist"
              fi
            else
              if [ -f "bin/bruin" ]; then
                echo "✅ bruin exists"
                file bin/bruin
                ls -la bin/bruin
              else
                echo "❌ bruin does not exist"
              fi
            fi
          else
            echo "❌ bin directory does not exist"
          fi
          echo ""
          echo "Integration tests directory:"
          if [ -d "integration-tests" ]; then
            echo "integration-tests directory exists"
            echo "Files in integration-tests:"
            ls -la integration-tests/
            echo ""
            echo "Checking binary path from integration-tests perspective:"
            cd integration-tests
            echo "Current directory: $(pwd)"
            if [[ "${{ matrix.platform }}" == "windows-2022" ]]; then
              if [ -f "../bin/bruin.exe" ]; then
                echo "✅ Binary accessible from integration-tests: ../bin/bruin.exe"
                ls -la ../bin/bruin.exe
              else
                echo "❌ Binary NOT accessible from integration-tests: ../bin/bruin.exe"
                echo "Parent directory contents:"
                ls -la ../
              fi
            else
              if [ -f "../bin/bruin" ]; then
                echo "✅ Binary accessible from integration-tests: ../bin/bruin"
                ls -la ../bin/bruin
              else
                echo "❌ Binary NOT accessible from integration-tests: ../bin/bruin"
                echo "Parent directory contents:"
                ls -la ../
              fi
            fi
            cd ..
          else
            echo "❌ integration-tests directory does not exist"
          fi

      - name: Debug - Test execution context
        run: |
          echo "=== TEST EXECUTION CONTEXT ==="
          echo "Current directory: $(pwd)"
          echo "PATH environment:"
          echo $PATH
          echo ""
          echo "Checking if bruin is in PATH:"
          if command -v bruin >/dev/null 2>&1; then
            echo "✅ bruin found in PATH at: $(which bruin)"
          else
            echo "❌ bruin not found in PATH"
          fi
          echo ""
          echo "Searching for any bruin files:"
          find . -name "*bruin*" -type f 2>/dev/null | head -10
          echo ""
          echo "Testing binary execution:"
          if [[ "${{ matrix.platform }}" == "windows-2022" ]]; then
            if [ -f "bin/bruin.exe" ]; then
              echo "Testing: ./bin/bruin.exe --version"
              ./bin/bruin.exe --version || echo "Binary execution failed"
            fi
          else
            if [ -f "bin/bruin" ]; then
              echo "Testing: ./bin/bruin --version"
              ./bin/bruin --version || echo "Binary execution failed"
            fi
          fi

      - name: Run integration tests with debug output
        run: |
          echo "=== RUNNING INTEGRATION TESTS ==="
          echo "Current directory: $(pwd)"
          echo "Binary location:"
          if [[ "${{ matrix.platform }}" == "windows-2022" ]]; then
            echo "Expected: bin/bruin.exe"
            ls -la bin/bruin.exe || echo "Binary not found"
          else
            echo "Expected: bin/bruin"
            ls -la bin/bruin || echo "Binary not found"
          fi
          echo ""
          echo "Running integration tests..."
          make integration-test
        shell: bash

  dockerBuild:
    runs-on: ubuntu-latest
    name: Docker Build
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: bruin-data
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'
      - run: make tools
      - name: Run golangci-lint
        run: golangci-lint run --timeout 10m60s ./...

  goreleaser-windows:
    runs-on: windows-2022
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: git mingw-w64-ucrt-x86_64-gcc
# TODO: Replace with actions/setup-go once issue is resolved https://github.com/actions/setup-go/pull/515
      - name: Setup Go 
        uses: antontroshin/setup-go@windows-go-mod-cache
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: "go.sum"
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: v2.3.2
          args: build --clean --snapshot --single-target --id bruin-windows-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref_name }}
          COMMIT_SHA: ${{ github.sha }}
          TELEMETRY_KEY: ${{ secrets.TELEMETRY_KEY }}

  goreleaser-unix:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run GoReleaser
        run: |
          docker run -e VERSION=0.0.0 -e COMMIT_SHA=${{ github.sha }}  -e TELEMETRY_KEY=${{ secrets.TELEMETRY_KEY }} -v $(pwd):/src -w /src goreleaser/goreleaser-cross:v1.22 build --snapshot --clean --id bruin-darwin --id bruin-linux-amd64 --id bruin-linux-arm64  --single-target
