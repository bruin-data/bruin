name: CI Checks

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'resources/**'
      - 'templates/**'
      - 'install.sh'
      - 'README.md'
      - 'Makefile'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'resources/**'
      - 'templates/**'
      - 'install.sh'
      - 'README.md'
      - 'Makefile'
      - 'package.json'
      - 'package-lock.json'


concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || (github.ref == 'refs/heads/main' && github.sha || github.ref) }}
  cancel-in-progress: true


env:
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: bruin-data/bruin

jobs:
  test:
    strategy:
      matrix:
        platform: [ ubuntu-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
# TODO: Replace with actions/setup-go once issue is resolved https://github.com/actions/setup-go/pull/515
      - name: Setup Go 
        uses: antontroshin/setup-go@windows-go-mod-cache
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: "go.sum"
      - run: make test


  end2end:
    strategy:
      matrix:
        platform: [ ubuntu-latest, windows-2022 ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
# TODO: Replace with actions/setup-go once issue is resolved https://github.com/actions/setup-go/pull/515
      - name: Setup Go 
        uses: antontroshin/setup-go@windows-go-mod-cache
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: "go.sum"
      - name: Install winget
        if: matrix.platform == 'windows-2022'
        uses: Cyberboss/install-winget@v1
      - run: make integration-test
        shell: bash

  dockerBuild:
    runs-on: ubuntu-latest
    name: Docker Build
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: bruin-data
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cache:latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cache:latest,mode=max
          build-args: |
            VERSION=${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
            BRANCH_NAME=${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'
      - run: make tools
      - name: Run golangci-lint
        run: golangci-lint run --timeout 10m60s ./...

  goreleaser-windows:
    runs-on: windows-2022
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: git mingw-w64-ucrt-x86_64-gcc
# TODO: Replace with actions/setup-go once issue is resolved https://github.com/actions/setup-go/pull/515
      - name: Setup Go 
        uses: antontroshin/setup-go@windows-go-mod-cache
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: "go.sum"
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: v2.3.2
          args: build --clean --snapshot --single-target --id bruin-windows-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref_name }}
          COMMIT_SHA: ${{ github.sha }}
          TELEMETRY_KEY: ${{ secrets.TELEMETRY_KEY }}

  goreleaser-unix:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run GoReleaser
        run: |
          docker run -e VERSION=0.0.0 -e COMMIT_SHA=${{ github.sha }}  -e TELEMETRY_KEY=${{ secrets.TELEMETRY_KEY }} -v $(pwd):/src -w /src goreleaser/goreleaser-cross:v1.22 build --snapshot --clean --id bruin-darwin --id bruin-linux-amd64 --id bruin-linux-arm64  --single-target

  check-docker-image:
    runs-on: ubuntu-latest
    name: Check Docker Image on Main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Read Bruin Version
        id: version
        run: |
          BRUIN_VERSION=$(cat src/core/BRUIN_VERSION.txt)
          echo "bruin_version=$BRUIN_VERSION" >> $GITHUB_OUTPUT
          echo "Checking Docker image for version: $BRUIN_VERSION"
      
      - name: Pull Docker Image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.bruin_version }}
